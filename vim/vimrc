set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

syntax on
set history=200
"colorscheme molokai
" 输入设置
set backspace=2
set tabstop=2
set shiftwidth=2
set smarttab
set expandtab

" 缩进设置
set autoindent
set smartindent
set cindent
set cinoptions=:0,g0,t0,(0,Ws,m1
set number
set hls
"set backspace=indent,eol,start
set hlsearch

"基本设置
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,chinese
set ambiwidth=double
set wrap "自动换行
set ignorecase "搜索忽略大小写
set path=/Users/dingxiaohua/Enviroment/centos_include
set path+=/Users/dingxiaohua/Enviroment/lib/include
set path+=/usr/local/go/src


Plugin 'gmarik/Vundle.vim'
Plugin 'fatih/vim-go'
Plugin 'dgryski/vim-godef'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'Valloric/YouCompleteMe'
Plugin 'suan/vim-instant-markdown'
Plugin 'majutsushi/tagbar'
Plugin 'rizzatti/dash.vim'
Plugin 'vim-clang-format'
Plugin 'nsf/gocode', { 'for': ['go', 'golang'] }
Plugin 'Blackrush/vim-gocode'
Plugin 'https://github.com/jstemmer/gotags.git'
Plugin 'mileszs/ack.vim'

Plugin 'vim-airline/vim-airline'
Plugin 'Chiel92/vim-autoformat'

" 显示设置
" support gnu syntaxt
let c_gnu = 1

" show error for mixed tab-space
let c_space_errors = 1
"let c_no_tab_space_error = 1

" don't show gcc statement expression ({x, y;}) as error
let c_no_curly_error = 1

let g:tagbar_width=30
let g:tagbar_right=1
let g:godef_same_file_in_same_window=1
"let g:clang_format#auto_format_on_insert_leave=1
let g:clang_format#auto_format=1
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

nmap <silent> <F7> :TagbarToggle<CR>
nmap <F4> :NERDTreeToggle<CR>
nmap <leader>dr :silent !open dash://ruby:<cword><cr>

let mapleader=","
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf=0


" *************** set for golang *******************
"自动补全
"imap <F6> <C-x><C-o>
let g:go_fmt_command = "goimports" " 格式化将默认的 gofmt 替换"
let g:go_fmt_autosave = 1
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"

let g:go_version_warning = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_methods = 1
let g:go_highlight_generate_tags = 1
let g:go_def_mapping_enabled=0
"let g:godef_split=2
let g:godef_split=0

"let g:jedi#auto_initialization = 0
"let g:jedi#goto_definitions_command = "gd"


"autocomplpop 设置
let g:AutoComplPop_IgnoreCaseOption=1
let g:acp_behaviorKeywordCommand="\<C-n>"

" you complete me
let g:ycm_auto_hover = ''
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:syntastic_ignore_files                  = [".*\.py$"]
let g:syntastic_cpp_compiler = 'g++'
let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libc++'
let g:ycm_collect_identifiers_from_tag_files  = 1
let g:ycm_error_symbol                        = '>>'
let g:ycm_warning_symbol                      = '>*'
let g:ycm_server_keep_logfiles                = 1
let g:ycm_server_log_level                    = 'debug'
let g:ycm_cache_omnifunc                      = 1
"let g:ycm_server_python_interpreter           = '/usr/bin/python'
"let g:ycm_global_ycm_extra_conf               = '~/.vim/ycm_extra_conf.py'
let g:ycm_key_invoke_completion               = '<C-\>'
let g:ycm_seed_identifiers_with_syntax        = 1                  " 语法关键字补全"
let g:ycm_min_num_of_chars_for_completion=1
let g:ycm_semantic_triggers                   = {
                        \'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
                        \'cs,lua,javascript,html,css': ['re!\w{2}']
                        \}

let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0


let g:formatdef_my_cpp = '"astyle --style=google"'
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0
autocmd FileType vim,tex let b:autoformat_autoindent=0
"let g:formatters_cpp = ['my_cpp']

map <F2> :YcmCompleter GoToDefinition<CR>
map <F3> :YcmCompleter GoToDeclaration<CR>
map <C-]> :YcmCompleter GoToDefinitionElseDeclaration<CR>

call vundle#end()
"filetype plugin off
filetype indent on
"filetype plugin indent on


autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()"
""定义函数SetTitle，自动插入文件头
func SetTitle()
    "如果文件类型为.sh文件
    if &filetype == 'sh'
        call setline(1, "# Created by kayxhding on ".strftime("%Y-%m-%d %H:%M:%S"))
        call append(line("."), "#!/usr/bin/env bash")
    else
        call setline(1, "//")
        call append(line("."),   "// Created by kayxhding on ".strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".")+1, "//")
        call append(line(".")+2, "")
    endif
endfunc

" 缩进格式修正：命名空间不增加缩进，以及修复默认情况下模板缩进错误
function! CppNoNamespaceAndTemplateIndent()
    let l:cline_num = line('.')
    let l:cline = getline(l:cline_num)
    let l:pline_num = prevnonblank(l:cline_num - 1)
    let l:pline = getline(l:pline_num)
    while l:pline =~# '\(^\s*{\s*\|^\s*//\|^\s*/\*\|\*/\s*$\)'
        let l:pline_num = prevnonblank(l:pline_num - 1)
        let l:pline = getline(l:pline_num)
    endwhile
    let l:retv = cindent('.')
    let l:pindent = indent(l:pline_num)
    if l:pline =~# '^\s*template\s*<\s*$'
        let l:retv = l:pindent + &shiftwidth
    elseif l:pline =~# '^\s*template\s*<.*>\s*$'
        let l:retv = l:pindent
    elseif l:pline =~# '\s*typename\s*.*,\s*$'
        let l:retv = l:pindent
    elseif l:pline =~# '\s*typename\s*.*>\s*$'
        let l:retv = l:pindent - &shiftwidth
    elseif l:cline =~# '^\s*>\s*$'
        let l:retv = l:pindent - &shiftwidth
    elseif l:pline =~# '^\s\+: \S.*' " C++ initialize list
        let l:retv = l:pindent + 2
    elseif l:pline =~# '^\s*namespace.*'
        let l:retv = 0
    endif
    return l:retv
endfunction
autocmd FileType cpp nested setlocal indentexpr=CppNoNamespaceAndTemplateIndent()

" 保存时自动删除行尾多余的空白字符
function! RemoveTrailingSpace()
    if $VIM_HATE_SPACE_ERRORS != '0'
        normal m`
        silent! :%s/\s\+$//e
        normal ``
    endif
endfunction
autocmd BufWritePre * nested call RemoveTrailingSpace()

" 修复不一致的换行符，统一采用 Unix 换行符(\n)
function! FixInconsistFileFormat()
    if &fileformat == 'unix'
        silent! :%s/\r$//e
    endif
endfunction
autocmd BufWritePre * nested call FixInconsistFileFormat()

" 增加'CppLint'自定义命令，在冒号模式下输入:CppLint即可检查当前文件，也支持带文件名参数。
" 检查结果支持 vim 的  QuickFix 模式，在不离开 vim 的情况下跳转到出错行方便，修正。
function! CppLint(...)
    let l:args = join(a:000)
    if l:args == ""
        let l:args = expand("%")
        if l:args == ""
            let l:args = '*'
        endif
    endif
    let l:old_makeprg = &makeprg
    setlocal makeprg=cpplint.py
    execute "make " . l:args
    let &makeprg=old_makeprg
endfunction
command! -complete=file -nargs=* CppLint call CppLint('<args>')

